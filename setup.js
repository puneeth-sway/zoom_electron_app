#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

console.log("üöÄ Pure Zoom Electron Setup\n");

// Check if config.js already exists
const configPath = path.join(__dirname, "config.js");
if (fs.existsSync(configPath)) {
  console.log(
    "‚ö†Ô∏è  config.js already exists. Do you want to overwrite it? (y/N)"
  );
  rl.question("", (answer) => {
    if (answer.toLowerCase() === "y" || answer.toLowerCase() === "yes") {
      runSetup();
    } else {
      console.log("Setup cancelled.");
      rl.close();
    }
  });
} else {
  runSetup();
}

function runSetup() {
  console.log("\nüìã Please provide your Zoom Video SDK credentials:");
  console.log("   Get these from: https://marketplace.zoom.us/");
  console.log('   Navigate to "Develop" ‚Üí "Build App" ‚Üí "Video SDK"\n');

  rl.question("Enter your Zoom SDK Key: ", (sdkKey) => {
    rl.question("Enter your Zoom SDK Secret: ", (sdkSecret) => {
      rl.question("Enable debug mode? (y/N): ", (debug) => {
        rl.question(
          "JWT token expiration in seconds (default: 7200): ",
          (expiration) => {
            const config = {
              ZOOM_SDK_KEY: sdkKey.trim(),
              ZOOM_SDK_SECRET: sdkSecret.trim(),
              DEBUG:
                debug.toLowerCase() === "y" || debug.toLowerCase() === "yes",
              JWT_EXPIRATION: parseInt(expiration) || 7200,
            };

            const configContent = `// Zoom Video SDK Configuration
// Generated by setup script

module.exports = ${JSON.stringify(config, null, 2)};
`;

            try {
              fs.writeFileSync(configPath, configContent);
              console.log("\n‚úÖ Configuration saved to config.js");
              console.log("\nüì¶ Next steps:");
              console.log("   1. Run: npm install");
              console.log("   2. Run: npm start");
              console.log("\nüéâ Setup complete!");
            } catch (error) {
              console.error("\n‚ùå Error saving configuration:", error.message);
            }

            rl.close();
          }
        );
      });
    });
  });
}
